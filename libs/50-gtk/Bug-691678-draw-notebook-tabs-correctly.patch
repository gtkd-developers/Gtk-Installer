--- gtk/gtk-win32-base.css
+++ gtk/gtk-win32-base.css
@@ -663,31 +663,46 @@ GtkComboBox .separator {
 
 .notebook tab {
     border-width: 0;
-    background-image: -gtk-win32-theme-part(tab, 1 1);
+}
+
+.notebook tab.top {
     padding: 0px 4px 0px 4px;
+    background-image: -gtk-win32-theme-part(tab, 1 1, rotate(0));
 }
 
-.notebook tab.left, .notebook tab.right {
+.notebook tab.right {
     padding: 4px 0px 4px 0px;
+    background-image: -gtk-win32-theme-part(tab, 1 1, rotate(1));
 }
 
-.notebook tab:active {
-    background-image: -gtk-win32-theme-part(tab, 1 3, margins(0 0 -1 0));
+.notebook tab.bottom {
+    padding: 0px 4px 0px 4px;
+    background-image: -gtk-win32-theme-part(tab, 1 1, rotate(2));
 }
-.notebook tab:active.top {
-    padding: 2px 4px 1px 4px;
+
+.notebook tab.left{
+    padding: 4px 0px 4px 0px;
+    background-image: -gtk-win32-theme-part(tab, 1 1, rotate(3));
 }
 
-.notebook tab:active.bottom {
-    padding: 1px 4px 2px 4px;
+.notebook tab:active.top {
+    padding: 2px 4px 1px 4px;
+    background-image: -gtk-win32-theme-part(tab, 1 3, margins(0 0 -1 0), rotate(0));
 }
 
 .notebook tab:active.right {
     padding: 4px 4px 4px 1px;
+    background-image: -gtk-win32-theme-part(tab, 1 3, margins(0 0 -1 0), rotate(1));
+}
+
+.notebook tab:active.bottom {
+    padding: 1px 4px 2px 4px;
+    background-image: -gtk-win32-theme-part(tab, 1 3, margins(0 0 -1 0), rotate(2));
 }
 
 .notebook tab:active.left {
     padding: 4px 1px 4px 4px;
+    background-image: -gtk-win32-theme-part(tab, 1 3, margins(0 0 -1 0), rotate(3));
 }
 
 /* Toolbar */
--- gtk/gtkcssimagewin32.c	2013-10-04 21:40:08 +0000
+++ gtk/gtkcssimagewin32.c	2013-12-11 09:35:12 +0000
@@ -35,6 +35,13 @@
   cairo_surface_t *surface;
   int dx, dy;
 
+  if (wimage->rotate == 1 || wimage->rotate == 3)
+    {
+      double tmp = width;
+      width = height;
+      height = tmp;
+    }
+
   surface = _gtk_win32_theme_part_create_surface (wimage->theme, wimage->part, wimage->state, wimage->margins,
 						  width, height, &dx, &dy);
   
@@ -57,6 +64,16 @@
       cairo_surface_destroy (surface2);
     }
 
+  if (wimage->rotate == 1)
+      cairo_translate (cr, height, 0);
+  else if (wimage->rotate == 2)
+      cairo_translate (cr, width, height);
+  else if (wimage->rotate == 3)
+      cairo_translate (cr, 0, width);
+
+  if (wimage->rotate != 0)
+      cairo_rotate (cr, wimage->rotate * (G_PI / 2));
+
   cairo_set_source_surface (cr, surface, dx, dy);
   cairo_pattern_set_extend (cairo_get_source (cr), CAIRO_EXTEND_NONE);
   cairo_rectangle (cr, 0, 0, width, height);
@@ -189,6 +206,33 @@
               return FALSE;
             }
         }
+      else if ( _gtk_css_parser_try (parser, "rotate", TRUE))
+        {
+          if (!_gtk_css_parser_try (parser, "(", TRUE))
+            {
+              _gtk_css_parser_error (parser,
+                                     "Expected '(' after 'rotate'");
+              return FALSE;
+            }
+
+          if (!_gtk_css_parser_try_int (parser, &wimage->rotate))
+            {
+              _gtk_css_parser_error (parser, "Expected a valid integer value");
+              return FALSE;
+            }
+          else if (wimage->rotate < 0 || wimage->rotate > 3)
+            {
+              _gtk_css_parser_error (parser, "Expected an integer between 0 and 3");
+              return FALSE;
+            }
+
+          if (!_gtk_css_parser_try (parser, ")", TRUE))
+            {
+              _gtk_css_parser_error (parser,
+                                     "Expected ')' at end of 'rotate'");
+              return FALSE;
+            }
+        }
       else
         {
           _gtk_css_parser_error (parser,

--- gtk/gtkcssimagewin32private.h
+++ gtk/gtkcssimagewin32private.h
@@ -48,6 +48,8 @@ struct _GtkCssImageWin32
 
   gint margins[4];
 
+  int rotate;
+
   HTHEME theme;
 };